@page "/"
@page "/taskboard"
@using Microsoft.EntityFrameworkCore
@using TaskBoard.Data
@using TaskBoard.Models
@inject AppDbContext DbContext

@rendermode InteractiveServer
@inject IJSRuntime JS

<h2>Task Board</h2>

<input placeholder="Search by title or assignee..." @bind="searchTerm" @bind:event="oninput" class="form-control mb-3" />

<div class="mb-3">
    <button class="btn btn-primary" @onclick="ShowAddForm">+ Add Task</button>
</div>

@if (showForm)
{
    <EditForm Model="editingTask" OnValidSubmit="SaveTask">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-2">
            <label>Title</label>
            <InputText class="form-control" @bind-Value="editingTask.Title" />
        </div>

        <div class="form-group mb-2">
            <label>Description</label>
            <InputTextArea class="form-control" @bind-Value="editingTask.Description" />
        </div>

        <div class="form-group mb-2">
            <label>Status</label>
            <InputSelect class="form-control" @bind-Value="editingTask.Status">
                <option value="">Select</option>
                <option value="To Do">To Do</option>
                <option value="In Progress">In Progress</option>
                <option value="Done">Done</option>
            </InputSelect>
        </div>

        <div class="form-group mb-2">
            <label>Assigned To</label>
            <InputText class="form-control" @bind-Value="editingTask.AssignedTo" />
        </div>

        <button type="submit" class="btn btn-success mt-2">
            @(editingTask.Id == 0 ? "Add Task" : "Update Task")
        </button>
        <button type="button" class="btn btn-secondary mt-2 ms-2" @onclick="HideForm">Cancel</button>
    </EditForm>
}

<hr />

<div class="row">
    @foreach (var status in Statuses)
    {
        <div class="col-md-4">
            <h4>@status (@FilteredTasks.Count(t => t.Status == status))</h4>
            <div class="drop-zone border p-2 mb-3"
                 style="min-height: 300px;"
                 ondragover="event.preventDefault()"
                 ondragenter="event.preventDefault()"
                 @ondrop="@((e) => OnDrop(e, status))"
                 @ondrop:preventDefault="true">

                @foreach (var task in FilteredTasks.Where(t => t.Status == status).OrderBy(t => t.CreatedAt))
                {
                    <div class="card mb-2 p-2 bg-light task-card"
                         draggable="true"
                         @ondragstart="@((e) => OnDragStart(e, task.Id))"
                         @ondragstart:preventDefault="false">

                        <strong>@task.Title</strong>
                        @if (!string.IsNullOrEmpty(task.Description))
                        {
                            <p class="mb-1">@task.Description</p>
                        }
                        @if (!string.IsNullOrEmpty(task.AssignedTo))
                        {
                            <p class="mb-1"><small>Assigned to: @task.AssignedTo</small></p>
                        }
                        <p class="mb-1"><small>Created: @task.CreatedAt.ToString("MM/dd/yyyy")</small></p>

                        <div class="mt-2">
                            <button class="btn btn-sm btn-primary me-1" @onclick="@(() => EditTask(task))" @onclick:stopPropagation="true">
                                Edit
                            </button>
                            <button class="btn btn-sm btn-danger" @onclick="@(() => ConfirmDelete(task.Id))" @onclick:stopPropagation="true">
                                Delete
                            </button>

                        </div>
                    </div>
                }

                @if (!FilteredTasks.Any(t => t.Status == status))
                {
                    <div class="text-muted text-center p-3">
                        <em>No tasks in this status</em>
                    </div>
                }
            </div>
        </div>
    }
</div>

<style>
    .drop-zone {
        min-height: 300px !important;
        transition: background-color 0.2s;
        position: relative;
    }

        .drop-zone:hover {
            background-color: #f8f9fa;
        }

        .drop-zone.drag-over {
            background-color: #e3f2fd;
            border-color: #2196f3 !important;
            border-width: 2px !important;
        }

    .task-card {
        cursor: move;
        transition: transform 0.1s;
    }

        .task-card:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .task-card:active {
            cursor: grabbing;
        }
</style>

@code {
    private string searchTerm = "";
    private bool showForm = false;
    private TaskItem editingTask = new();
    private List<TaskItem> tasks = new();
    private int draggedTaskId;

    private readonly string[] Statuses = new[] { "To Do", "In Progress", "Done" };

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        try
        {
            tasks = await DbContext.TaskItems
                .AsNoTracking()
                .OrderByDescending(t => t.CreatedAt)
                .ToListAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Log error or show user message
            Console.WriteLine($"Error loading tasks: {ex.Message}");
        }
    }

    private IEnumerable<TaskItem> FilteredTasks =>
        tasks.Where(t =>
            string.IsNullOrWhiteSpace(searchTerm) ||
            (t.Title?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true) ||
            (t.AssignedTo?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true));

    private void ShowAddForm()
    {
        editingTask = new TaskItem
        {
            Status = "To Do",
            CreatedAt = DateTime.UtcNow
        };
        showForm = true;
    }

    private void EditTask(TaskItem task)
    {
        editingTask = new TaskItem
        {
            Id = task.Id,
            Title = task.Title,
            Description = task.Description,
            Status = task.Status,
            AssignedTo = task.AssignedTo,
            CreatedAt = task.CreatedAt
        };
        showForm = true;
    }

    private void HideForm()
    {
        showForm = false;
        editingTask = new TaskItem();
    }

    private async Task SaveTask()
    {
        try
        {
            if (editingTask.Id == 0)
            {
                // Adding new task
                editingTask.CreatedAt = DateTime.UtcNow;
                DbContext.TaskItems.Add(editingTask);
            }
            else
            {
                // Updating existing task
                var existingTask = await DbContext.TaskItems.FindAsync(editingTask.Id);
                if (existingTask != null)
                {
                    existingTask.Title = editingTask.Title;
                    existingTask.Description = editingTask.Description;
                    existingTask.Status = editingTask.Status;
                    existingTask.AssignedTo = editingTask.AssignedTo;
                    // Keep original CreatedAt
                }
            }

            await DbContext.SaveChangesAsync();
            showForm = false;
            await LoadTasks();
        }
        catch (Exception ex)
        {
            // Log error or show user message
            Console.WriteLine($"Error saving task: {ex.Message}");
        }
    }

    private async Task DeleteTask(int id)
    {
        try
        {
            var task = await DbContext.TaskItems.FindAsync(id);
            if (task != null)
            {
                DbContext.TaskItems.Remove(task);
                await DbContext.SaveChangesAsync();
                await LoadTasks();
            }
        }
        catch (Exception ex)
        {
            // Log error or show user message
            Console.WriteLine($"Error deleting task: {ex.Message}");
        }
    }
    private async Task ConfirmDelete(int id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this task?");
        if (confirmed)
        {
            await DeleteTask(id);
        }
    }

    private void OnDragStart(DragEventArgs e, int taskId)
    {
        draggedTaskId = taskId;
        // Add some data to the drag operation
        e.DataTransfer.DropEffect = "move";
        e.DataTransfer.EffectAllowed = "move";
    }

    private async Task OnDrop(DragEventArgs e, string newStatus)
    {
        try
        {
            // Prevent default handling
            e.DataTransfer.DropEffect = "move";

            if (draggedTaskId > 0)
            {
                var task = await DbContext.TaskItems.FindAsync(draggedTaskId);
                if (task != null && task.Status != newStatus)
                {
                    task.Status = newStatus;
                    await DbContext.SaveChangesAsync();
                    await LoadTasks();
                }
            }
        }
        catch (Exception ex)
        {
            // Log error or show user message
            Console.WriteLine($"Error updating task status: {ex.Message}");
        }
        finally
        {
            draggedTaskId = 0; 
            StateHasChanged(); 
        }
    }

    private void OnDragEnter(DragEventArgs e)
    {
        e.DataTransfer.DropEffect = "move";
    }

    private void OnDragLeave(DragEventArgs e)
    {
       
    }
}